name: CI/CD collab_api

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      db:
        image: mariadb:latest
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.DB_DATABASE }}
          MYSQL_USER: ${{ secrets.DB_USERNAME }}
          MYSQL_PASSWORD: ${{ secrets.DB_PASSWORD }}
        ports:
          - 3306:3306
        # options: >-
        #   --health-cmd="mysqladmin ping --silent"
        #   --health-interval=10s
        #   --health-timeout=5s
        #   --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install dependencies
      run: npm install

    - name: Log environment variables
      run: |
        echo "DB_DATABASE: ${{ secrets.DB_DATABASE }}"
        echo "DB_USERNAME: ${{ secrets.DB_USERNAME }}"
        echo "DB_PASSWORD: ${{ secrets.DB_PASSWORD }}"
        echo "DB_HOST: ${{ secrets.DB_HOST }}"

    - name: debug
      run: ls /home/runner/work/collab_api/collab_api

    - name: Start Docker
      run: sudo systemctl start docker

    - name: bourrin
      run: chmod 777 /home/runner/work/collab_api/collab_api/initdb.sh

    - name: Docker compose
      run: docker compose up -d

    - name: Docker logs
      run: docker ps

    - name: Mariadb
      run: docker-compose mariadb bash -c "mariadb -u ${{ secrets.DB_USERNAME }} --password ${{ secrets.DB_PASSWORD }} ${{ secrets.DB_DATABASE }} < initbd.sql"

    - name: Run tests
      env:
        DB_DATABASE: ${{ secrets.DB_APP_DATABASE }}
        DB_USERNAME: ${{ secrets.DB_APP_USERNAME }}
        DB_PASSWORD: ${{ secrets.DB_APP_PASSWORD }}
        DB_HOST: ${{ secrets.DB_APP_HOST }}
      run: npm run test

  docker:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/collab_api-app:latest

# name: CI/CD collab_api

# on:
#   push:
#     branches: ["main"]
#   workflow_dispatch:

# permissions:
#   contents: read
#   pages: write
#   id-token: write

# concurrency:
#   group: "pages"
#   cancel-in-progress: false

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
#     services:
#       db:
#         image: mariadb:latest
#         env:
#           MYSQL_ROOT_PASSWORD: ${{ secrets.DB_PASSWORD }}
#           MYSQL_DATABASE: ${{ secrets.DB_DATABASE }}
#           MYSQL_USERNAME: ${{ secrets.DB_USERNAME }}
#           MYSQL_PASSWORD: ${{ secrets.DB_PASSWORD }}
#         ports:
#           - "3306:3306"
#         options: >-
#           --health-cmd="mysqladmin ping --silent"
#           --health-interval=10s
#           --health-timeout=5s
#           --health-retries=3
#     steps:
#       - name: Start Docker
#         run: sudo systemctl start docker

#       - name: Vérifier les conteneurs
#         run: docker ps

#       - name: Checkout
#         uses: actions/checkout@v4

#       - name: Configuration de Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: '18'

#       - name: Installation des dépendances
#         run: npm install

#       - name: Lancer les tests
#         env:
#           DB_APP_DATABASE: ${{ secrets.DB_DATABASE }}
#           DB_APP_USERNAME: ${{ secrets.DB_USERNAME }}
#           DB_APP_PASSWORD: ${{ secrets.DB_PASSWORD }}
#           DB_APP_HOST: 127.0.0.1
#         run: npm run test
#         #! problème : le conteneur n'est pas lancé

#       - name: Construire l'image Docker
#         run: docker build -t collab_api-app .

#       - name: Connexion à Docker Hub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_PASSWORD }}

#       - name: Pousser l'image Docker
#         run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/collab_api-app:latest

#   sonarqube:
#     name: SonarQube
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4
#         with:
#           fetch-depth: 0

#       - name: SonarQube Scan
#         uses: SonarSource/sonarqube-scan-action@v4.1.0
#         env:
#           SONAR_TOKEN: ${{ secrets.SONARTOKEN }}